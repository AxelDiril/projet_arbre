/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package pj_arbre;

import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.LinkedHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dirila
 */
public class V_Individus extends javax.swing.JDialog {

    /**
     * Creates new form V_Utilisateurs_Admin
     */
    private C_Arbre leControl;
    private M_Arbre unArbre;
    private boolean isModification = false;
    private LinkedHashMap <Integer, M_Individu> lesIndividus;
    private LinkedHashMap<String, M_Genre> lesGenres;
    private LinkedHashMap<Integer, M_Type_Evenement> lesTypesEvenement;
    private DefaultTableModel dm_tb_individus;
    private Object[] tableauCles;
    private int ligne;
    private int cle;
    
    public V_Individus(java.awt.Frame parent, boolean modal, C_Arbre leControl) {           
        super(parent, modal);
        this.leControl = leControl;
        initComponents();
    }
    
    public void afficher(LinkedHashMap<Integer, M_Individu> lesIndividus, M_Arbre unArbre, LinkedHashMap<String, M_Genre> lesGenres, LinkedHashMap<Integer, M_Type_Evenement> lesTypesEvenements ) {
        this.lesIndividus = lesIndividus;
        this.unArbre = unArbre;
        this.lesGenres = lesGenres;
        this.lesTypesEvenement = lesTypesEvenements;

//        this.modeEdit(false);
//        aff_cms();

        modeSaisie(false);
        isModification = false;

        dm_tb_individus = new DefaultTableModel(new Object[]{"Nom", "Prénom"}, 0);
        tb_individus.setModel(dm_tb_individus);

        tableauCles = lesIndividus.keySet().toArray();

        for (Integer uneCle : lesIndividus.keySet()) {
            M_Individu ind = lesIndividus.get(uneCle);
            dm_tb_individus.addRow(new Object[]{
                ind.getNom(),
                ind.getPrenom()
            });
        }
        
        co_genre.removeAllItems();
        for (String codeGenre : lesGenres.keySet()) {
            M_Genre genre = lesGenres.get(codeGenre);
            co_genre.addItem(genre.getLibelle());
        }

        if (!lesIndividus.isEmpty()) {
            tb_evenements.setRowSelectionInterval(0, 0);
//            remplirChamps();
        }

        this.setSize(1000, 650);
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }
    
    private void modeSaisie(boolean active) {
        ed_nom.setEditable(active);
        ed_prenom.setEditable(active);
        co_genre.setEnabled(active);

        tb_evenements.setEnabled(!active);

        pn_am.setVisible(active);
        pn_cms.setVisible(!active);
        
        bt_ajout.setEnabled(!active);
        bt_modifier.setEnabled(!active);
        bt_supprimer.setEnabled(!active);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sc_evenements = new javax.swing.JScrollPane();
        tb_evenements = new javax.swing.JTable();
        lb_nom = new javax.swing.JLabel();
        lb_prenom = new javax.swing.JLabel();
        lb_genre = new javax.swing.JLabel();
        ed_nom = new javax.swing.JTextField();
        ed_prenom = new javax.swing.JTextField();
        co_genre = new javax.swing.JComboBox<>();
        pn_am = new javax.swing.JPanel();
        bt_annuler = new javax.swing.JButton();
        bt_enregistrer = new javax.swing.JButton();
        pn_cms = new javax.swing.JPanel();
        bt_ajout = new javax.swing.JButton();
        bt_supprimer = new javax.swing.JButton();
        bt_modifier = new javax.swing.JButton();
        sc_util = new javax.swing.JScrollPane();
        tb_individus = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestion des utilisateurs");
        setResizable(false);
        getContentPane().setLayout(null);

        tb_evenements.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Evenement", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_evenements.getTableHeader().setReorderingAllowed(false);
        tb_evenements.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_evenementsMouseClicked(evt);
            }
        });
        sc_evenements.setViewportView(tb_evenements);
        if (tb_evenements.getColumnModel().getColumnCount() > 0) {
            tb_evenements.getColumnModel().getColumn(0).setResizable(false);
        }

        getContentPane().add(sc_evenements);
        sc_evenements.setBounds(450, 290, 360, 190);

        lb_nom.setText("Nom :");
        getContentPane().add(lb_nom);
        lb_nom.setBounds(30, 330, 60, 20);

        lb_prenom.setText("Prénom :");
        lb_prenom.setToolTipText("");
        getContentPane().add(lb_prenom);
        lb_prenom.setBounds(30, 370, 90, 27);

        lb_genre.setText("Genre :");
        getContentPane().add(lb_genre);
        lb_genre.setBounds(30, 410, 80, 27);
        getContentPane().add(ed_nom);
        ed_nom.setBounds(150, 320, 260, 35);
        getContentPane().add(ed_prenom);
        ed_prenom.setBounds(150, 370, 260, 35);

        co_genre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sélectionnez un genre" }));
        getContentPane().add(co_genre);
        co_genre.setBounds(150, 410, 260, 35);

        bt_annuler.setText("Annuler");
        bt_annuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_annulerActionPerformed(evt);
            }
        });

        bt_enregistrer.setText("Enregistrer");
        bt_enregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_enregistrerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pn_amLayout = new javax.swing.GroupLayout(pn_am);
        pn_am.setLayout(pn_amLayout);
        pn_amLayout.setHorizontalGroup(
            pn_amLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_amLayout.createSequentialGroup()
                .addComponent(bt_enregistrer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bt_annuler, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );
        pn_amLayout.setVerticalGroup(
            pn_amLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pn_amLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pn_amLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bt_enregistrer)
                    .addComponent(bt_annuler))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        getContentPane().add(pn_am);
        pn_am.setBounds(50, 500, 300, 60);

        bt_ajout.setText("Ajout");
        bt_ajout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_ajoutActionPerformed(evt);
            }
        });

        bt_supprimer.setText("Supprimer");
        bt_supprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_supprimerActionPerformed(evt);
            }
        });

        bt_modifier.setText("Modifier");
        bt_modifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_modifierActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pn_cmsLayout = new javax.swing.GroupLayout(pn_cms);
        pn_cms.setLayout(pn_cmsLayout);
        pn_cmsLayout.setHorizontalGroup(
            pn_cmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pn_cmsLayout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(pn_cmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bt_ajout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bt_supprimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bt_modifier, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pn_cmsLayout.setVerticalGroup(
            pn_cmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pn_cmsLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(bt_modifier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bt_supprimer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bt_ajout)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        getContentPane().add(pn_cms);
        pn_cms.setBounds(660, 60, 170, 180);

        tb_individus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nom", "Prénom"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_individus.getTableHeader().setReorderingAllowed(false);
        tb_individus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_individusMouseClicked(evt);
            }
        });
        sc_util.setViewportView(tb_individus);
        if (tb_individus.getColumnModel().getColumnCount() > 0) {
            tb_individus.getColumnModel().getColumn(0).setResizable(false);
            tb_individus.getColumnModel().getColumn(1).setResizable(false);
            tb_individus.getColumnModel().getColumn(1).setHeaderValue("Prénom");
        }

        getContentPane().add(sc_util);
        sc_util.setBounds(22, 14, 302, 256);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_modifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_modifierActionPerformed
        modeSaisie(true);
        isModification = true;
    }//GEN-LAST:event_bt_modifierActionPerformed

    private void bt_supprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_supprimerActionPerformed
        int selectedRow = tb_individus.getSelectedRow();

        if (selectedRow != -1) {
            int idIndividu = (int) tableauCles[selectedRow];
            M_Individu individu = lesIndividus.get(idIndividu);

            int confirm = JOptionPane.showConfirmDialog(this,
                "Voulez-vous vraiment supprimer l’individu : " +
                individu.getPrenom() + " " + individu.getNom() + " ?",
                "Confirmation",
                JOptionPane.YES_NO_OPTION
            );

            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    leControl.supprimerIndividu(idIndividu);

                    // Mise à jour des données locales
                    lesIndividus.remove(idIndividu);
                    dm_tb_individus.removeRow(selectedRow);

                    // Mise à jour du tableau des clés
                    tableauCles = lesIndividus.keySet().toArray();

                    ed_nom.setText("");
                    ed_prenom.setText("");
                    co_genre.setSelectedIndex(0);

                    JOptionPane.showMessageDialog(this, "Individu supprimé avec succès.");
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this,
                        "Erreur lors de la suppression : " + ex.getMessage(),
                        "Erreur", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Veuillez sélectionner un individu à supprimer.");
        }
    }//GEN-LAST:event_bt_supprimerActionPerformed

    private void bt_ajoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_ajoutActionPerformed
        modeSaisie(true);
        ed_nom.setText("");
        ed_prenom.setText("");
        co_genre.setSelectedIndex(0);
    }//GEN-LAST:event_bt_ajoutActionPerformed

    private void bt_annulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_annulerActionPerformed
        modeSaisie(false);
        isModification = false;

        int selectedRow = tb_evenements.getSelectedRow();
        if (selectedRow != -1) {
            tb_individusMouseClicked(null);  // recharge les valeurs de l'individu sélectionné
        }
    }//GEN-LAST:event_bt_annulerActionPerformed

    private void bt_enregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_enregistrerActionPerformed
        String nom = ed_nom.getText().trim();
        String prenom = ed_prenom.getText().trim();
        String selectedGenreLabel = (String) co_genre.getSelectedItem();

        if (nom.isEmpty() || prenom.isEmpty() || selectedGenreLabel.equals("Sélectionnez un genre")) {
            JOptionPane.showMessageDialog(this, "Tous les champs doivent être remplis.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        M_Genre selectedGenre = null;
        for (M_Genre genre : lesGenres.values()) {
            if (genre.getLibelle().equals(selectedGenreLabel)) {
                selectedGenre = genre;
                break;
            }
        }

        if (selectedGenre == null) {
            JOptionPane.showMessageDialog(this, "Le genre sélectionné est invalide.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String codeGenre = selectedGenre.getCodeGenre();

        try {
            if (isModification) {
                // Modification
                int selectedRow = tb_evenements.getSelectedRow();
                if (selectedRow != -1) {
                    int idIndividu = (int) tableauCles[selectedRow];
                    leControl.updateIndividu(idIndividu, nom, prenom, codeGenre, unArbre);
                    JOptionPane.showMessageDialog(this, "Individu modifié avec succès.");
                }
            } else {
                // Ajout
                leControl.insertIndividu(nom, prenom, codeGenre, unArbre);
                JOptionPane.showMessageDialog(this, "Individu ajouté avec succès.");
            }

            // Recharger la vue
            leControl.aff_V_Individus(unArbre);

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erreur : " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(V_Individus.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bt_enregistrerActionPerformed

    private void tb_evenementsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_evenementsMouseClicked

    }//GEN-LAST:event_tb_evenementsMouseClicked

    private void tb_individusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_individusMouseClicked
        int selectedRow = tb_individus.getSelectedRow();
        if (selectedRow != -1) {
            int cleIndividu = (int) tableauCles[selectedRow];
            M_Individu individu = lesIndividus.get(cleIndividu);

            ed_nom.setText(individu.getNom());
            ed_prenom.setText(individu.getPrenom());

            String codeGenre = individu.getCodeGenre();
            M_Genre genre = lesGenres.get(codeGenre);
            if (genre != null) {
                co_genre.setSelectedItem(genre.getLibelle());
            }

            try {
                LinkedHashMap<Integer, M_Evenement> evenements = leControl.getEvenements(individu);

                DefaultTableModel dm_evenements = new DefaultTableModel(new Object[]{"Événement", "Date"}, 0);

                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

                for (M_Evenement unEvenement : evenements.values()) {
                    // On récupère l'ID du type d'événement lié à l'événement
                    int idTypeEvenement = unEvenement.getIdTypeEvenement();

                    // Chercher le type d'événement dans les types d'événements
                    M_Type_Evenement typeEvenement = lesTypesEvenement.get(idTypeEvenement);

                    // Vérifier si le type d'événement existe dans la map
                    String libelle = (typeEvenement != null) ? typeEvenement.getLabel() : "Inconnu";

                    // Récupérer la date de l'événement et la formater
                    LocalDate date = unEvenement.getDate();
                    String uneDate = (date != null) ? date.format(formatter) : "N/A";

                    // Ajouter la ligne au tableau
                    dm_evenements.addRow(new Object[]{libelle, uneDate});
                }

                tb_evenements.setModel(dm_evenements);

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,
                    "Erreur lors du chargement des événements : " + ex.getMessage(),
                    "Erreur", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_tb_individusMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(V_Individus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(V_Individus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(V_Individus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(V_Individus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                V_Individus dialog = new V_Individus(new javax.swing.JFrame(), true, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_ajout;
    private javax.swing.JButton bt_annuler;
    private javax.swing.JButton bt_enregistrer;
    private javax.swing.JButton bt_modifier;
    private javax.swing.JButton bt_supprimer;
    private javax.swing.JComboBox<String> co_genre;
    private javax.swing.JTextField ed_nom;
    private javax.swing.JTextField ed_prenom;
    private javax.swing.JLabel lb_genre;
    private javax.swing.JLabel lb_nom;
    private javax.swing.JLabel lb_prenom;
    private javax.swing.JPanel pn_am;
    private javax.swing.JPanel pn_cms;
    private javax.swing.JScrollPane sc_evenements;
    private javax.swing.JScrollPane sc_util;
    private javax.swing.JTable tb_evenements;
    private javax.swing.JTable tb_individus;
    // End of variables declaration//GEN-END:variables
}
